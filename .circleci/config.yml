version: 2.1

# so, there will be a 'virtual machine' running in side circleci
# .circleci\config.yml >> Makefile

commands:
  
  # this is like a 're-useable function'
  # https://circleci.com/docs/reusing-config/
  echo_stuff:
    parameters:
      input1:
        default: ">>>>>>>>>> put something here <<<<<<<<<<<<<<<<"
        type: string
    steps:
      - run: echo "<< parameters.input1 >>"
          
          
# a reusable 'docker thing' 
orbs:
  docker: circleci/docker@1.5.0

jobs:
  Init:
    machine: # 'machine executor'
      image: ubuntu-2204:2022.04.2
    
    steps:
      # 'download' the code from github into the 'virtual machine' in circleci
      - checkout

      # - restore_cache:
          # keys: 
            # use the 'saved stuff' in the 'cache' if the 'checksum' of the 'requirements.txt' is the same
            # - v1-dependencies-{{ checksum "hello_app/requirements.txt" }}
          
          # if: |
            # Check if cache exists and is not expired
            # steps.cache_setup.outputs.cache-found == 'true'
            # ls -la $HOME/.cache/

      # - run:
          # name: View contents of cache
          # command: |
            # ls -la $HOME/.cache/   

      
      - echo_stuff:
          input1: "testing testing testing testing testing testing testing"

      - run:
          name: Creating virtual environment and activating it
          command: |
            python3 -m venv .devops-capstone            


      - run:
          name: Installing Shell script Linters
          # echo "${VERSION} <<< so this is how you echo inside circleci, not $VERSION"
          command: |    
            source .devops-capstone/bin/activate      

            if [ -n "$VIRTUAL_ENV" ]; then
              echo "Virtual environment name: $(basename $VIRTUAL_ENV)"
            else
              echo "Virtual environment is not activated."
              exit 1
            fi


            chmod +x ./bin/install_shellcheck.sh
            chmod +x ./bin/install_hadolint.sh
            chmod +x ./bin/install_kubectl.sh
            chmod +x ./bin/install_eksctl.sh

            make install
            echo "============================="      
            echo "============================="      
            
      
          # make install  
          # 'make install' is a 'make' command in the 'Makefile' file running the 'install section'
          # these 2 lines work, but i'm not gonna use them
          # Makefile >> install
          # let don't use the 'make command'
      
      - run: 
          name: Looking at stuff in Bin folder
          command: |
            source .devops-capstone/bin/activate

            echo "pwd $(pwd)"
            echo "ls $(ls -la)"
            cd ./bin
            echo "pwd $(pwd)"
            echo "ls $(ls -la)"
            cd ..
            cd hello_app
            echo "pwd $(pwd)"
            echo "ls $(ls -la)"
            echo "why is this not working?"


      - run:
          name: Linting ALL the shell scripts in the 'bin' folder
          command: |
            source .devops-capstone/bin/activate      

            if [ -n "$VIRTUAL_ENV" ]; then
              echo "Virtual environment name: $(basename $VIRTUAL_ENV)"
            else
              echo "Virtual environment is not activated."
              exit 1
            fi

            pwd
            ./bin/shellcheck -Cauto -a ./bin/*.sh

      - run:
          name: Linitng the Dockerfile
          command: |
            source .devops-capstone/bin/activate      

            if [ -n "$VIRTUAL_ENV" ]; then
              echo "Virtual environment name: $(basename $VIRTUAL_ENV)"
            else
              echo "Virtual environment is not activated."
              exit 1
            fi

            
            ./bin/hadolint ./hello_app/Dockerfile
      
      - run:
          name: Building the Dockerfile             
          command: |
            source .devops-capstone/bin/activate      

            if [ -n "$VIRTUAL_ENV" ]; then
              echo "Virtual environment name: $(basename $VIRTUAL_ENV)"
            else
              echo "Virtual environment is not activated."
              exit 1
            fi
            
            pwd
            echo "ls: $(ls -la)"
            cd hello_app
            docker build -t ${DOCKER_LOGIN}/hello_app:latest .
            echo "============================="
            echo "ls: $(ls -la)"
            cd ..
            echo "ls: $(ls -la)"
            docker images

      - run:
          name: Upload the Dockerfile to DockerHub
          command: |
            source .devops-capstone/bin/activate      

            if [ -n "$VIRTUAL_ENV" ]; then
              echo "Virtual environment name: $(basename $VIRTUAL_ENV)"
            else
              echo "Virtual environment is not activated."
              exit 1
            fi

            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            docker push ${DOCKER_LOGIN}/hello_app:latest
            # $DOCKER_LOGIN, this is a 'environment variable' in circleci.com
            # https://app.circleci.com/settings/project

      

      # save the FILES in folders .devops-capstone and ./bin to the 'cache'
      # - save_cache:
          # paths:
            # - ./.devops-capstone             
          # key: v1-dependencies-{{ checksum "hello_app/requirements.txt" }}


  createEksCluster:
    machine: # 'machine executor'
      image: ubuntu-2204:2022.04.2
        
    steps:
      # 'download' the code from github into the 'virtual machine' in circleci
      - checkout

      - add_ssh_keys:
         fingerprints:
            - "1f:b8:0f:98:06:b7:ae:41:e7:99:e5:89:7d:27:f0:32"

      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | \
            tar xz -C /tmp && \
            sudo mv /tmp/eksctl /usr/local/bin/
            
            eksctl version
            echo "============================="      

      - run:
          name: Install kubectl
          command: |
            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" && \
            chmod +x kubectl && \
            sudo mv kubectl /usr/local/bin/

            kubectl version --client
            echo "============================="

      - run:
          name: Create EKS Cluster in AWS
          command: |
            eksctl create cluster --config-file=./.circleci/cluster1.yml

      - run:
          name: Verify EKS Cluster in AWS
          command: |
            kubectl get nodes
            echo "=============================" 

      - run:
          name: Deploy the Dockerfile from Docker.com to EKS Cluster in AWS
          command: |
            kubectl create deployment deploy1 --image=${DOCKER_LOGIN}/hello_app:latest
            echo "============================="

      - run:
          name: List all the 'Deployments' in the EKS Cluster in AWS
          command: |
            kubectl get deployments
            echo "============================="

      - run:
          name: List all the 'Pods' in the EKS Cluster in AWS
          command: |
            kubectl get pods
            echo "============================="          

      - run:
          name: (Expose) the 'Pods (containers running together)' in the EKS Cluster in AWS
          command: |
            kubectl expose deployment deploy1 --type=LoadBalancer --port=80 
            echo "============================="


workflows:
  default:
    jobs:
      # - Init
      - createEksCluster
      
          
          
          

        